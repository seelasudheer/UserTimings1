{"version":3,"sources":["Components/UserTimings.js","App.js","serviceWorker.js","index.js"],"names":["UserTimings","useState","user","members","data","show","setShow","timings","setTimings","timings2","setTimings2","mal","setMal","givenDate","setGivenDate","fname","setFname","handleClose","handleShow","length","map","x","index","key","onClick","y","activity_periods","getData","real_name","Modal","onHide","Header","closeButton","Title","Body","style","color","start_time","end_time","type","value","onChange","e","target","disabled","undefined","str","Date","getMonth","i","startsWith","slice","toLowerCase","push","Footer","Button","variant","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"s6BAsFeA,MAnFf,WAAwB,IAAD,EACKC,mBAAS,YAAIC,EAAKC,UADvB,mBACZC,EADY,aAEKH,oBAAS,IAFd,mBAEZI,EAFY,KAENC,EAFM,OAGWL,mBAAS,IAHpB,mBAGZM,EAHY,KAGHC,EAHG,OAIaP,mBAAS,IAJtB,mBAIZQ,EAJY,KAIFC,EAJE,OAKGT,mBAAS,IALZ,mBAKZU,EALY,KAKPC,EALO,OAMeX,qBANf,mBAMZY,EANY,KAMDC,EANC,OAOOb,qBAPP,mBAOZc,EAPY,KAOLC,EAPK,KAmBjBC,EAAc,kBAAMX,GAAQ,IAC1BY,EAAa,WACfZ,GAAQ,GACRQ,KA2BF,OACI,6BACI,iDAA0B,6BAAK,6BAE3BV,EAAKe,OAAO,GAAKf,EAAKgB,KAAI,SAACC,EAAEC,GACzB,OAAO,yBAAMC,IAAKD,EAAOE,QAAS,kBA5CxC,SAACH,EAAEI,GAEbf,EAAYW,EAAEK,kBACdlB,EAAWa,EAAEK,kBACbV,EAASS,GACTP,IAuCsDS,CAAQN,EAAEA,EAAEO,aAAY,gCAAOP,EAAEO,eAG/E,kBAACC,EAAA,EAAD,CAAOxB,KAAMA,EAAMyB,OAAQb,GAC/B,kBAACY,EAAA,EAAME,OAAP,CAAcC,aAAW,GACzB,kBAACH,EAAA,EAAMI,MAAP,mBAAyBlB,IAEzB,kBAACc,EAAA,EAAMK,KAAP,KAEJzB,EAASU,OAAO,EAAIV,EAASW,KAAI,SAACC,EAAEC,GACpC,OAAO,yBAAKC,IAAKD,GACb,4BAAI,0BAAMa,MAAO,CAACC,MAAM,cAApB,kBAAwDf,EAAEgB,YAClE,4BAAI,0BAAMF,MAAO,CAACC,MAAM,YAApB,gBAAJ,IAAyDf,EAAEiB,UAAc,iCAEtE,8DAEL,2BAAOC,KAAK,OAAOC,MAAO3B,EAAW4B,SA7CxB,SAACC,GAEV5B,EAAa4B,EAAEC,OAAOH,OACtB5B,EAAO,OAiCL,UAUN,4BAAQgC,cAAsBC,IAAZhC,EAAkCW,QAzCrC,WAQb,IANA,IAGKsB,EADI,CAAC,UAAW,WAAY,QAAS,QAAS,MAAO,OAAQ,OAAQ,SAAU,YAAa,UAAW,WAAY,YAFhH,IAAIC,KAAKlC,GACPmC,YAKFC,EAAE,EAAEA,EAAE1C,EAAQY,OAAO8B,KAE2C,IAAjEH,EAAII,WAAW3C,EAAQ0C,GAAGZ,WAAWc,MAAM,EAAE,GAAGC,gBAC/CzC,EAAI0C,KAAK9C,EAAQ0C,IAK7BvC,EAAYC,KAyBV,aAEM,kBAACkB,EAAA,EAAMyB,OAAP,KACE,kBAACC,EAAA,EAAD,CAAQC,QAAQ,YAAYhC,QAASP,GAArC,aCjEKwC,MARf,WACE,OACE,yBAAKC,UAAU,aACb,kBAAC,EAAD,QCKcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.7ecd262d.chunk.js","sourcesContent":["import React,{useState} from 'react'\r\nimport user from '../Data/Test.json';\r\nimport {Modal,Button} from 'react-bootstrap' \r\nfunction UserTimings() {\r\n    const [data, setData] = useState([...user.members]);\r\n    const [show, setShow] = useState(false);\r\n    const [timings, setTimings] = useState([])\r\n    const [timings2, setTimings2] = useState([])\r\n    const [mal, setMal] = useState([])\r\n    const [givenDate, setGivenDate] = useState()\r\n    const [fname, setFname] = useState()\r\n\r\n\r\nconst getData=(x,y)=>{\r\n   // console.log(x.activity_periods,\"i am here\");\r\n    setTimings2(x.activity_periods);\r\n    setTimings(x.activity_periods);\r\n    setFname(y);\r\n    handleShow();\r\n\r\n   // console.log(timings2,\"timings\");\r\n}\r\nconst handleClose = () => setShow(false);\r\n  const handleShow = () => {\r\n      setShow(true);\r\n      setGivenDate()\r\n  }\r\n  \r\n  const Update=(e)=>{\r\n     // console.log(e.target.value,\"tagere\")\r\n      setGivenDate(e.target.value)\r\n      setMal([])\r\n  }\r\n  const showData=()=>{\r\n   // console.log(\"month\");\r\n    var d = new Date(givenDate);\r\n    var n = d.getMonth();\r\n    var mL = ['january', 'february', 'march', 'april', 'may', 'june', 'july', 'august', 'september', 'october', 'november', 'december'];\r\n     var str=mL[n];\r\n    // console.log(timings,\"timings\");\r\n   // console.log(n,\"month\",str);\r\n    for(let i=0;i<timings.length;i++){\r\n       // console.log(str.startsWith(timings[i].start_time.slice(0,2).toLowerCase()),\"x.startsWith(str)\",timings[i].start_time.slice(0,3));\r\n        if(str.startsWith(timings[i].start_time.slice(0,2).toLowerCase())===true){\r\n            mal.push(timings[i]);\r\n        }\r\n    }\r\n\r\n     \r\nsetTimings2(mal);\r\n  }\r\n\r\n    return (\r\n        <div>\r\n            <h1>List of Employees</h1><br/><br/>\r\n            {\r\n                data.length>0 && data.map((x,index)=>{\r\n                    return <div  key={index} onClick={()=>getData(x,x.real_name)}><h4 > {x.real_name}</h4></div>\r\n                  })\r\n            }\r\n            <Modal show={show} onHide={handleClose}>\r\n        <Modal.Header closeButton>\r\n        <Modal.Title>Timings of {fname}</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n   {\r\n    timings2.length>0 ? timings2.map((x,index)=>{\r\n    return <div key={index}>\r\n        <h6><span style={{color:'orangered'}}> Start Time : </span>{x.start_time}</h6>\r\n    <h6><span style={{color:'#7b6ceb'}}> End Time : </span> {x.end_time}</h6><br/>\r\n    </div>\r\n    }):<h5>No Timings Data in Given Month</h5>\r\n  }\r\n  <input type='date' value={givenDate} onChange={Update}/> &emsp;\r\n  <button disabled={givenDate===undefined?true:false} onClick={showData}>Click me</button>\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button variant=\"secondary\" onClick={handleClose}>\r\n            Close\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default UserTimings\r\n","import React from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport UserTimings from './Components/UserTimings'\nfunction App() {\n  return (\n    <div className=\"container\">\n      <UserTimings/> \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}